require('test.asserts')
local mocked_session = require('test.mocked_session')
local api = require('nvim.api')

describe('Ext Types', function()
  before_each(function()
    api = api.new(mocked_session.new({}))
  end)
  -- Tests NVim types implemented in the lua client
  for _, ext_type in ipairs({'Buffer', 'Window', 'Tabpage'}) do
    describe(string.format('%s Type', ext_type), function()
      -- TODO: We need to define how a buffer looks where coming from nvim, for the moment we assume
      -- any table
      it('We can create instances from a table representing the type', function()
        assert.is_not_nil(api:get_type(ext_type).new({}))
      end)
      it('We never try to coerce any type into it', function()
        local i = api:get_type(ext_type)
        assert.is_nil(i.new(1))
        assert.is_nil(i.new(true))
        assert.is_nil(i.new(false))
        assert.is_nil(i.new('{}'))
        assert.is_nil(i.new(nil))
      end)
      it('We return nil and error when the creation failed', function()
        local _, err = api:get_type(ext_type).new(true)
        assert.equal(err, string.format('Expected %s, got `true`(boolean)', ext_type))
      end)
      it('Type implements __tostring', function()
        local typ = api:get_type(ext_type)
        assert.equal(tostring(typ), string.format('%s[nvim ext type]', ext_type))
      end)
      it('instances implements __tostring', function()
        local i = api:get_type(ext_type).new({})
        assert.equal(tostring(i):match(string.format('%s%%[nvim ext type%%]: 0x', ext_type)),
                     string.format('%s[nvim ext type]: 0x', ext_type))
      end)
      it('We can call methods on type instances', function()
        local i = api:get_type(ext_type).new({})
        assert.is_not_nil(i:test())
      end)
    end)
  end
  -- Tests that the client can use types coming from nvim that are not implemented as lua types
  describe('MyType (type uknown by client)', function()
    it('We can create instances from any value (it is just wrapper)', function()
      assert.is_not_nil(api:get_type('MyType').new({}))
      assert.is_not_nil(api:get_type('MyType').new(1))
      assert.is_not_nil(api:get_type('MyType').new(true))
      assert.is_not_nil(api:get_type('MyType').new("another value"))
    end)
    it('We can not create instances from nil', function()
      assert.is_nil(api:get_type('MyType').new(nil))
    end)
    it('Type implements __tostring', function()
        local typ = api:get_type('MyType')
        assert.equal(tostring(typ), 'MyType[nvim ext type]')
      end)
    it('instances implements __tostring', function()
        local i = api:get_type('MyType').new({})
        assert.equal(tostring(i):match('MyType%[nvim ext type%]: 0x'),
                     'MyType[nvim ext type]: 0x')
      end)
    it('We can call methods on Type instances', function()
      local i = api:get_type('MyType').new({})
      assert.is_not_nil(i:test())
    end)
  end)
end)
