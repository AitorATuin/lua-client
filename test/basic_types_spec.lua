require('test.asserts')
local mocked_session = require('test.mocked_session')
local api = require('nvim.api')

describe('Basic Types', function()
  local types
  before_each(function()
    types = api.new(mocked_session.new({}))._types
  end)
  describe('Boolean', function()
    it('We can create booleans', function()
      assert.equal(types.Boolean.new(true), true)
      assert.equal(types.Boolean.new(false), false)
    end)
    it('We never try to coerce any type into boolean', function()
      assert.is_nil(types.Boolean.new(1))
      assert.is_nil(types.Boolean.new("aa"))
      assert.is_nil(types.Boolean.new({}))
      assert.is_nil(types.Boolean.new(nil))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.Boolean.new(1)
      assert.equal(err, 'Expected Boolean, got `1`(number)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.Boolean), 'Boolean[nvim type]')
    end)
  end)
  describe('Integer', function()
    it('We can create integers (numbers in lua)', function()
      assert.equal(types.Integer.new(0), 0)
      assert.equal(types.Integer.new(12312312312312312), 12312312312312312)
    end)
    it('We never try to coerce any type into integer', function()
      assert.is_nil(types.Integer.new("1"))
      assert.is_nil(types.Integer.new(true))
      assert.is_nil(types.Integer.new(false))
      assert.is_nil(types.Integer.new("0"))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.Integer.new(true)
      assert.equal(err, 'Expected Integer, got `true`(boolean)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.Integer), 'Integer[nvim type]')
    end)
  end)
  describe('Float', function()
    it('We can create Floats (numbers in lua)', function()
      assert.equal(types.Float.new(0.0), 0)
      assert.equal(types.Float.new(1.2312312312312312), 1.2312312312312312)
    end)
    it('We never try to coerce any type into Float', function()
      assert.is_nil(types.Float.new('1.123'))
      assert.is_nil(types.Float.new(true))
      assert.is_nil(types.Float.new(false))
      assert.is_nil(types.Float.new('0.0'))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.Float.new(true)
      assert.equal(err, 'Expected Float, got `true`(boolean)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.Float), 'Float[nvim type]')
    end)
  end)
  describe('String', function()
    it('We can create Strings', function()
      assert.equal(types.String.new('0.0'), '0.0')
      assert.equal(types.String.new('1.2312312312312312'), '1.2312312312312312')
      assert.equal(types.String.new('nil'), 'nil')
      assert.equal(types.String.new('{}'), '{}')
    end)
    it('We never try to coerce any type into String', function()
      assert.is_nil(types.String.new(1))
      assert.is_nil(types.String.new(true))
      assert.is_nil(types.String.new(false))
      assert.is_nil(types.String.new({}))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.String.new(true)
      assert.equal(err, 'Expected String, got `true`(boolean)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.String), 'String[nvim type]')
    end)
  end)
  describe('Array', function()
    it('We can create Arrays', function()
      assert.contains_same_items(types.Array.new({1,2,3,4,5}), {1,2,3,4,5})
      assert.contains_same_items(types.Array.new({'uno', 'dos', 'tres'}),
                                                 {'uno', 'dos', 'tres'})
      assert.contains_same_items(types.Array.new({uno = 1, dos = 2, tres = 3}), {})
      assert.contains_same_items(types.Array.new({}), {})
    end)
    it('We never try to coerce any type into String', function()
      assert.is_nil(types.Array.new(1))
      assert.is_nil(types.Array.new(true))
      assert.is_nil(types.Array.new(false))
      assert.is_nil(types.Array.new('{}'))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.Array.new(true)
      assert.equal(err, 'Expected Array, got `true`(boolean)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.Array), 'Array[nvim type]')
    end)
  end)
  describe('ArrayOf', function()
    it('We can create Arrays', function()
      assert.contains_same_items(types.ArrayOf.new({1,2,3,4,5}, types.Integer), {1,2,3,4,5})
      assert.contains_same_items(types.ArrayOf.new({'uno', 'dos', 'tres'}, types.String),
                                                 {'uno', 'dos', 'tres'})
      assert.contains_same_items(types.ArrayOf.new({uno = 1, dos = 2, tres = 3}, types.Integer), {})
      assert.contains_same_items(types.ArrayOf.new({}, types.String), {})
      assert.contains_same_items(types.ArrayOf.new({}, types.Integer), {})
    end)
    it('We never try to coerce any type into String', function()
      assert.is_nil(types.ArrayOf.new(1, types.String))
      assert.is_nil(types.ArrayOf.new(true, types.String))
      assert.is_nil(types.ArrayOf.new(false, types.String))
      assert.is_nil(types.ArrayOf.new('{}', types.String))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.ArrayOf.new(true, types.Boolean)
      assert.equal(err, 'Expected Array, got `true`(boolean)')
    end)
    it('We return an error when any element in the array is not the expected type', function ()
      local _, err = types.ArrayOf.new({1,2,3,4,5,6}, types.String)
      assert.equal(err, 'Expected ArrayOf[String[nvim type]] but we found `1`(number)')
      _, err = types.ArrayOf.new({'1', '2', '3', '4', '5'}, types.Integer)
      assert.equal(err, 'Expected ArrayOf[Integer[nvim type]] but we found `1`(string)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.ArrayOf), 'ArrayOf[nvim type]')
    end)
  end)

  describe('Dictionary', function()
    it('We can create Dictionaries', function()
      assert.contains_same_items(types.Dictionary.new({1,2,3,4,5}), {})
      assert.contains_same_items(types.Dictionary.new({'uno', 'dos', 'tres'}), {})
      assert.contains_same_items(types.Dictionary.new({uno = 1, dos = 2, tres = 3}),
                                 {uno = 1, dos = 2, tres = 3})
      assert.contains_same_items(types.Dictionary.new({}), {})
    end)
    it('We never try to coerce any type into String', function()
      assert.is_nil(types.Dictionary.new(1))
      assert.is_nil(types.Dictionary.new(true))
      assert.is_nil(types.Dictionary.new(false))
      assert.is_nil(types.Dictionary.new('{}'))
    end)
    it('We return nil and error when the creation failed', function()
      local _, err = types.Dictionary.new(true)
      assert.equal(err, 'Expected Dictionary, got `true`(boolean)')
    end)
    it('Type implements __tostring', function()
      assert.equal(tostring(types.Dictionary), 'Dictionary[nvim type]')
    end)
  end)
end)

